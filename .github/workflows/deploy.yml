name: Deploy AWS Lambda Pub/Sub Solution

on:
  push:
    branches:
      - main
      - develop
      - 'feature/*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      destroy:
        description: 'Destroy infrastructure instead of deploying'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: '1.6.0'
  PYTHON_VERSION: '3.9'
  AWS_REGION: 'us-east-1'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      terraform-changed: ${{ steps.changes.outputs.terraform }}
      python-changed: ${{ steps.changes.outputs.python }}
      tests-changed: ${{ steps.changes.outputs.tests }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            terraform:
              - 'terraform/**'
              - 'scripts/**'
            python:
              - 'src/**'
              - 'requirements.txt'
            tests:
              - 'tests/**'
              - 'src/**'

  validate-terraform:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.terraform-changed == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Format Check
        run: terraform fmt -check -recursive terraform/
      
      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend=false
      
      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

  test-python:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.python-changed == 'true' || needs.detect-changes.outputs.tests-changed == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov black flake8 mypy boto3 moto
      
      - name: Code formatting check
        run: black --check src/
      
      - name: Lint with flake8
        run: flake8 src/ --max-line-length=100 --ignore=E203,W503
      
      - name: Type check with mypy
        run: mypy src/ --ignore-missing-imports
      
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.python-changed == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: |
          pip install bandit safety
      
      - name: Run Bandit security scan
        run: bandit -r src/ -f json -o bandit-report.json || true
      
      - name: Run Safety dependency check
        run: safety check --json --output safety-report.json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build-packages:
    runs-on: ubuntu-latest
    needs: [validate-terraform, test-python]
    if: always() && (needs.validate-terraform.result == 'success' || needs.validate-terraform.result == 'skipped') && (needs.test-python.result == 'success' || needs.test-python.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install zip utility
        run: sudo apt-get update && sudo apt-get install -y zip
      
      - name: Build Lambda packages
        run: |
          # Create packages directory
          mkdir -p lambda-packages
          
          # Build Publisher package
          cd src/publisher
          pip install -r requirements.txt -t .
          zip -r ../../lambda-packages/publisher.zip . -x "*.pyc" "__pycache__/*" "tests/*" "*.pytest_cache/*"
          cd ../..
          
          # Build Subscriber package
          cd src/subscriber
          pip install -r requirements.txt -t .
          zip -r ../../lambda-packages/subscriber.zip . -x "*.pyc" "__pycache__/*" "tests/*" "*.pytest_cache/*"
          cd ../..
      
      - name: Upload Lambda packages
        uses: actions/upload-artifact@v3
        with:
          name: lambda-packages
          path: lambda-packages/
          retention-days: 30

  deploy-dev:
    runs-on: ubuntu-latest
    needs: [build-packages]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: 
      name: dev
      url: ${{ steps.deploy.outputs.api_gateway_url }}
    
    env:
      ENVIRONMENT: dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: Download Lambda packages
        uses: actions/download-artifact@v3
        with:
          name: lambda-packages
          path: lambda-packages/
      
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
      
      - name: Select Terraform Workspace
        run: |
          cd terraform
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}
      
      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan -var="environment=${{ env.ENVIRONMENT }}" -var="aws_region=${{ env.AWS_REGION }}" -out=tfplan
      
      - name: Terraform Apply
        id: deploy
        if: github.event.inputs.destroy != 'true'
        run: |
          cd terraform
          terraform apply tfplan
          
          # Capture outputs
          echo "sns_topic_arn=$(terraform output -raw sns_topic_arn)" >> $GITHUB_OUTPUT
          echo "publisher_function_name=$(terraform output -raw publisher_lambda_function_name)" >> $GITHUB_OUTPUT
          echo "subscriber_function_name=$(terraform output -raw subscriber_lambda_function_name)" >> $GITHUB_OUTPUT
          if terraform output api_gateway_url > /dev/null 2>&1; then
            echo "api_gateway_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
          fi
      
      - name: Terraform Destroy
        if: github.event.inputs.destroy == 'true'
        run: |
          cd terraform
          terraform destroy -var="environment=${{ env.ENVIRONMENT }}" -var="aws_region=${{ env.AWS_REGION }}" -auto-approve

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-packages, deploy-dev]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: staging
      url: ${{ steps.deploy.outputs.api_gateway_url }}
    
    env:
      ENVIRONMENT: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: Download Lambda packages
        uses: actions/download-artifact@v3
        with:
          name: lambda-packages
          path: lambda-packages/
      
      - name: Deploy to Staging
        id: deploy
        run: |
          cd terraform
          terraform init
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}
          terraform plan -var="environment=${{ env.ENVIRONMENT }}" -var="aws_region=${{ env.AWS_REGION }}" -out=tfplan
          terraform apply tfplan
          
          # Capture outputs
          echo "sns_topic_arn=$(terraform output -raw sns_topic_arn)" >> $GITHUB_OUTPUT
          echo "publisher_function_name=$(terraform output -raw publisher_lambda_function_name)" >> $GITHUB_OUTPUT
          echo "subscriber_function_name=$(terraform output -raw subscriber_lambda_function_name)" >> $GITHUB_OUTPUT
          if terraform output api_gateway_url > /dev/null 2>&1; then
            echo "api_gateway_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
          fi
      
      - name: Run Integration Tests
        env:
          TEST_SNS_TOPIC_ARN: ${{ steps.deploy.outputs.sns_topic_arn }}
          TEST_PUBLISHER_FUNCTION_NAME: ${{ steps.deploy.outputs.publisher_function_name }}
          TEST_SUBSCRIBER_FUNCTION_NAME: ${{ steps.deploy.outputs.subscriber_function_name }}
        run: |
          pip install pytest boto3
          pytest tests/integration/ -v

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-packages, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.api_gateway_url }}
    
    env:
      ENVIRONMENT: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: Download Lambda packages
        uses: actions/download-artifact@v3
        with:
          name: lambda-packages
          path: lambda-packages/
      
      - name: Deploy to Production
        id: deploy
        run: |
          cd terraform
          terraform init
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}
          terraform plan -var="environment=${{ env.ENVIRONMENT }}" -var="aws_region=${{ env.AWS_REGION }}" -var="enable_monitoring=true" -var="enable_audit_trail=true" -out=tfplan
          terraform apply tfplan
          
          # Capture outputs
          echo "sns_topic_arn=$(terraform output -raw sns_topic_arn)" >> $GITHUB_OUTPUT
          echo "publisher_function_name=$(terraform output -raw publisher_lambda_function_name)" >> $GITHUB_OUTPUT
          echo "subscriber_function_name=$(terraform output -raw subscriber_lambda_function_name)" >> $GITHUB_OUTPUT
          if terraform output api_gateway_url > /dev/null 2>&1; then
            echo "api_gateway_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
          fi

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: Notify deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const { sha } = context;
            
            let status = '✅ SUCCESS';
            let color = '36a64f';
            
            if (needs['deploy-production'].result === 'failure') {
              status = '❌ FAILED';
              color = 'danger';
            } else if (needs['deploy-production'].result === 'cancelled') {
              status = '⚠️ CANCELLED';
              color = 'warning';
            }
            
            console.log(`Deployment ${status} for commit ${sha}`);